commit 792788a41dc52e88b02552285ed022860ff74235
Author: Marko Kenttälä <marko.kenttala@jolla.com>
Date:   Thu Nov 1 14:02:31 2018 +0200

    commit 8948b3415d762245ebf5e19d80b97d4d8cc208c1
    Author: Lennart Poettering <lennart@poettering.net>
    Date:   Wed Oct 17 18:36:24 2018 +0200

        core: when deserializing state always use read_line(…, LONG_LINE_MAX, …)

        This should be much better than fgets(), as we can read substantially
        longer lines and overly long lines result in proper errors.

        Fixes a vulnerability discovered by Jann Horn at Google.

        CVE-2018-15686
        LP: #1796402
        https://bugzilla.redhat.com/show_bug.cgi?id=1639071

diff --git a/src/basic/def.h b/src/basic/def.h
index 5aaba1fe8..14383dacd 100644
--- a/src/basic/def.h
+++ b/src/basic/def.h
@@ -65,6 +65,7 @@
 
 #define NOTIFY_FD_MAX 768
 #define NOTIFY_BUFFER_MAX PIPE_BUF
+#define LONG_LINE_MAX (1U*1024U*1024U)
 
 #if HAVE_SPLIT_USR
 #  define _CONF_PATHS_SPLIT_USR(n) "/lib/" n "\0"
diff --git a/src/basic/fileio.c b/src/basic/fileio.c
index 4a9105f42..c3920f8b0 100644
--- a/src/basic/fileio.c
+++ b/src/basic/fileio.c
@@ -1564,6 +1564,15 @@ int mkdtemp_malloc(const char *template,
         return 0;
 }
 
+/* Takes inspiration from Rusts's Option::take() method: reads and returns a pointer, but at the same time resets it to
+ * NULL. See: https://doc.rust-lang.org/std/option/enum.Option.html#method.take */
+#define TAKE_PTR(ptr)                           \
+        ({                                      \
+                typeof(ptr) _ptr_ = (ptr);      \
+                (ptr) = NULL;                   \
+                _ptr_;                          \
+})
+
 DEFINE_TRIVIAL_CLEANUP_FUNC(FILE*, funlockfile);
 
 int read_line(FILE *f, size_t limit, char **ret) {
@@ -1629,8 +1638,7 @@ int read_line(FILE *f, size_t limit, cha
         if (ret) {
                 buffer[n] = 0;
 
-                *ret = buffer;
-                buffer = NULL;
+                *ret = TAKE_PTR(buffer);
         }
 
         return (int) count;
diff --git a/src/core/job.c b/src/core/job.c
index 15f5cc0cc..f818eecd9 100644
--- a/src/core/job.c
+++ b/src/core/job.c
@@ -41,6 +41,7 @@
 #include "terminal-util.h"
 #include "unit.h"
 #include "virt.h"
+#include "fileio.h"
 
 Job* job_new_raw(Unit *unit) {
         Job *j;
@@ -1076,20 +1077,21 @@ int job_deserialize(Job *j, FILE *f) {
         assert(f);
 
         for (;;) {
-                char line[LINE_MAX], *l, *v;
+                _cleanup_free_ char *line = NULL;
+                char *l, *v;
+                int r;
                 size_t k;
 
-                if (!fgets(line, sizeof(line), f)) {
-                        if (feof(f))
-                                return 0;
+                r = read_line(f, LONG_LINE_MAX, &line);
+                if (r < 0)
                         return -errno;
-                }
+                if (r == 0)
+                        return 0;
 
-                char_array_0(line);
                 l = strstrip(line);
 
                 /* End marker */
-                if (l[0] == 0)
+                if (isempty(l))
                         return 0;
 
                 k = strcspn(l, "=");
diff --git a/src/core/manager.c b/src/core/manager.c
index 94a1647af..97e6ed90f 100644
--- a/src/core/manager.c
+++ b/src/core/manager.c
@@ -93,6 +93,7 @@
 #include "util.h"
 #include "virt.h"
 #include "watchdog.h"
+#include "fileio.h"
 
 #define NOTIFY_RCVBUF_SIZE (8*1024*1024)
 #define CGROUPS_AGENT_RCVBUF_SIZE (8*1024*1024)
@@ -2918,22 +2919,18 @@ int manager_deserialize(Manager *m, FILE
         m->n_reloading++;
 
         for (;;) {
-                char line[LINE_MAX];
                 const char *val, *l;
+                _cleanup_free_ char *line = NULL;
 
-                if (!fgets(line, sizeof(line), f)) {
-                        if (feof(f))
-                                r = 0;
-                        else
-                                r = -errno;
-
+                r = read_line(f, LONG_LINE_MAX, &line);
+                if (r < 0)
+                        r = -errno;
+                if (r <= 0)
                         goto finish;
-                }
 
-                char_array_0(line);
                 l = strstrip(line);
 
-                if (l[0] == 0)
+                if (isempty(l)) /* end marker */
                         break;
 
                 if ((val = startswith(l, "current-job-id="))) {
@@ -3082,22 +3079,18 @@ int manager_deserialize(Manager *m, FILE
         }
 
         for (;;) {
+                _cleanup_free_ char *line = NULL;
                 Unit *u;
-                char name[UNIT_NAME_MAX+2];
                 const char* unit_name;
 
                 /* Start marker */
-                if (!fgets(name, sizeof(name), f)) {
-                        if (feof(f))
-                                r = 0;
-                        else
-                                r = -errno;
-
+                r = read_line(f, LONG_LINE_MAX, &line);
+                if (r < 0)
+                        r = -errno;
+                if (r <= 0)
                         goto finish;
-                }
 
-                char_array_0(name);
-                unit_name = strstrip(name);
+                unit_name = strstrip(line);
 
                 r = manager_load_unit(m, unit_name, NULL, NULL, &u);
                 if (r < 0) {
diff --git a/src/core/unit.c b/src/core/unit.c
index 43a5ca106..19f014e6a 100644
--- a/src/core/unit.c
+++ b/src/core/unit.c
@@ -67,6 +67,7 @@
 #include "unit.h"
 #include "user-util.h"
 #include "virt.h"
+#include "fileio.h"
 
 const UnitVTable * const unit_vtable[_UNIT_TYPE_MAX] = {
         [UNIT_SERVICE] = &service_vtable,
@@ -3319,17 +3320,17 @@ int unit_deserialize(Unit *u, FILE *f, F
         assert(fds);
 
         for (;;) {
-                char line[LINE_MAX], *l, *v;
+                _cleanup_free_ char *line = NULL;
+                char *l, *v;
                 CGroupIPAccountingMetric m;
                 size_t k;
 
-                if (!fgets(line, sizeof(line), f)) {
-                        if (feof(f))
-                                return 0;
+                r = read_line(f, LONG_LINE_MAX, &line);
+                if (r < 0)
                         return -errno;
-                }
+                if (r == 0) /* eof */
+                        return 0;
 
-                char_array_0(line);
                 l = strstrip(line);
 
                 /* End marker */
